
//1-signup
app.post("/signup", async (req, res) => {
  try {
    const { FirstName, LastName, email, password } = req.body;

    if (!FirstName || !LastName || !email || !password) {
      return res.status(400).json({ error: "All fields are required" });
    }

    // Check if email already exists
    const existingUser = await recruiterModel.findOne({ email });
    if (existingUser) {
      return res.status(400).json({ error: "Email already exists" });
    }

    // Hash the password before saving
    const salt = await bcrypt.genSalt(10);
    const hashedPassword = await bcrypt.hash(password, salt);

    const newRecruiter = new recruiterModel({
      FirstName,
      LastName,
      email,
      password: hashedPassword,
      isAdmin: false, // Set isAdmin to false by default
    });

    await newRecruiter.save(); // Await the save() method

    res.status(201).json({ message: "New recruiter created successfully" });
  } catch (err) {
    console.error("Error during signup:", err);
    res.status(500).json({ error: "Internal server error" });
  }
});
//1login
app.post('/login',async (req, res) => {
  try {
    // Login logic here
    const user = await User.findOne({ email: req.body.email });
    if (!user) {
      return res.status(401).json({ error: 'Invalid email or password' });
    }

    const isValid = await bcrypt.compare(req.body.password, user.password);
    if (!isValid) {
      return res.status(401).json({ error: 'Invalid email or password' });
    }

    const token = jwt.sign({ _id: user._id, isAdmin: user.isAdmin }, process.env.SECRET_KEY, {
      expiresIn: '1h',
    });

    res.json({ token, isAdmin: user.isAdmin });
  } catch (error) {
    console.error('Login error:', error);
    res.status(500).json({ error: 'Internal Server Error' });
  }
});