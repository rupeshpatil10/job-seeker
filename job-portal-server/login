app.post('/signup', async (req, res) => {
    try {
      const { FirstName, LastName, email, password } = req.body;
  
      if (!FirstName || !LastName || !email || !password) {
        return res.status(400).json({ error: "All fields are required" });
      }
  
      const existingUser = await User.findOne({ email });
      if (existingUser) {
        return res.status(400).json({ error: "Email already exists" });
      }
  
      const salt = await bcrypt.genSalt(10);
      const hashedPassword = await bcrypt.hash(password, salt);
  
      const newUser = new User({
        FirstName,
        LastName,
        email,
        password: hashedPassword,
        isAdmin: false,
      });
  
      await newUser.save();
      res.status(201).json({ message: "New user created successfully" });
    } catch (err) {
      console.error("Error during signup:", err);
      res.status(500).json({ error: "Internal server error" });
    }
  });
  //login
  app.post('/login', async (req, res) => {
    try {
      const { email, password } = req.body;
  
      console.log(`Received email and password: ${email} ${password}`);
  
      const user = await User.findOne({ email });
      if (!user) {
        console.log(`User not found: ${email}`);
        return res.status(401).json({ error: 'Invalid email or password' });
      }
  
      console.log(`User found: ${user.email}`);
  
      const isValid = await bcrypt.compare(password, user.password);
      if (!isValid) {
        console.log(`Password invalid: ${password}`);
        return res.status(401).json({ error: 'Invalid email or password' });
      }
  
      console.log(`Password valid: ${password}`);
  
      const token = jwt.sign({ _id: user._id, isAdmin: user.isAdmin }, process.env.SECRET_KEY, {
        expiresIn: '1h',
      });
  
      res.json({ token, isAdmin: user.isAdmin });
    } catch (error) {
      console.error('Login error:', error);
      res.status(500).json({ error: 'Internal Server Error' });
    }
  });
  //login.jsx
  const handleLogin = async (e) => {
    e.preventDefault();
  try {
    const response = await fetch('http://localhost:5000/login', {
      method: 'POST',
      headers: {
        'Content-Type': 'application/json',
      },
      body: JSON.stringify({ email, password }),
    });
    console.log('Request body:', { email, password });
  
    if (!response.ok) {
      if (response.status === 401) {
        setError('Invalid email or password');
      } else {
        throw new Error(response.statusText);
      }
    }
  
    const data = await response.json();
  
    if (data.error) {
      setError(data.error);
    } else {
      localStorage.setItem('token', data.token);
      navigate(data.isAdmin ? '/admin-dashboard' : '/');
    }
  
  } catch (error) {
    console.error('Login error:', error);
    setError('Login failed. Please try again.');
  }